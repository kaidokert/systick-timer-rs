[package]
# TODO(1) fix `authors` and `name` if you didn't use `cargo-generate`
authors = ["Kaido Kert <kaidokert@gmail.com>"]
name = "feather-m0-board"
edition = "2024"
version = "0.1.0"

[[bin]]
name = "timer_stress"
path = "src/bin/timer_stress.rs"
test = false

[lib]
harness = false

[dependencies]
cortex-m = { version = "0.7", features = ["critical-section-single-core"] }
cortex-m-rt = "0.7"
rtt-target = { version = "0.6", features = ["log"] }
panic-rtt-target = { version = "0.2" }
cortex-m-semihosting = "0.5"
log = "0.4"
critical-section = "1"

# HAL crate
feather_m0 = "0.19"
# Crate under test
systick-timer = { path = "../../systick-timer" }
timer_stress = { path = "../timer_stress", default-features = false }

[features]
# Timer frequency configurations - SAMD21: 15kHz baseline (lower for Cortex-M0+)
freq-target-target = ["timer_stress/freq-target-target"]  # Timer1=15kHz, Timer2=15kHz (baseline)
freq-target-below = ["timer_stress/freq-target-below"]   # Timer1=15kHz, Timer2=14.999kHz
freq-target-above = ["timer_stress/freq-target-above"]   # Timer1=15kHz, Timer2=15.001kHz

# Interrupt blocking configurations
block-none = ["timer_stress/block-none"]      # No critical sections (current state)
block-timer1 = ["timer_stress/block-timer1"]    # Timer1 (TC4) uses critical_section when calling systick
block-timer2 = ["timer_stress/block-timer2"]    # Timer2 (TC5) uses critical_section when calling systick
block-both = ["timer_stress/block-both"]      # Both timers use critical_section

# Test duration configurations
duration-short = ["timer_stress/duration-short"]  # 5 second test (quick verification)
duration-full = ["timer_stress/duration-full"]   # 30 second test (shorter than STM32 due to slower MCU)

# Timer reload configurations (to accelerate overflow testing)
reload-normal = ["timer_stress/reload-normal"]   # 0xFFFFFF reload (~51 hours to overflow)
reload-small = ["timer_stress/reload-small"]    # 0x1FFF reload (larger than STM32 to avoid overwhelming)

# Interrupt priority configurations
priority-equal = ["timer_stress/priority-equal"]         # All equal priority (1,1,1) - default behavior
priority-systick-high = ["timer_stress/priority-systick-high"]  # SysTick higher than timers (0,1,1)
priority-timer1-high = ["timer_stress/priority-timer1-high"]   # Timer1 highest priority (1,0,1)
priority-timer2-high = ["timer_stress/priority-timer2-high"]   # Timer2 highest priority (1,1,0)
priority-mixed-1 = ["timer_stress/priority-mixed-1"]       # SysTick high, Timer1 high, Timer2 low (0,0,2)
priority-mixed-2 = ["timer_stress/priority-mixed-2"]       # SysTick high, Timer1 med, Timer2 low (0,1,2)
priority-mixed-3 = ["timer_stress/priority-mixed-3"]       # SysTick high, Timer1 low, Timer2 med (0,2,1)
priority-timers-high = ["timer_stress/priority-timers-high"]   # Both timers higher than SysTick (2,0,0)

# Default features
default = ["freq-target-target", "block-none", "duration-short", "reload-normal", "priority-equal"]

# cargo build/run
[profile.dev]
# default is opt-level = '0', but that makes very
# verbose machine code
opt-level = 's'
# trade compile speed for slightly better optimisations
codegen-units = 1

# cargo build/run --release
[profile.release]
# default is opt-level = '3', but that makes quite
# verbose machine code
opt-level = 's'
# trade compile speed for slightly better optimisations
codegen-units = 1
# Use Link Time Optimisations to further inline things across
# crates
lto = 'fat'
# Leave the debug symbols in (default is no debug info)
debug = 2
